package android.library.wdroid.common.utils;

import android.content.Context;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;


public class W_ResourceUtil {

    public static String GEN_PACKAGE_NAME = "";//使用本类,必须先初始化此参数

    /**
     * get an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an
     * application as assets -- that is, files placed in to the "assets" directory.
     *
     * @param context
     * @param fileName The name of the asset to open. This name can be hierarchical.
     * @return
     */
    public static String geFileFromAssets(Context context, String fileName) {
        if (context == null || W_StringUtil.isEmpty(fileName)) {
            return null;
        }
        StringBuilder s = new StringBuilder("");
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * get content from a raw resource. This can only be used with resources whose value is the name of an asset files
     * -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color
     * resources.
     *
     * @param context
     * @param resId   The resource identifier to open, as generated by the appt tool.
     * @return
     */
    public static String geFileFromRaw(Context context, int resId) {
        if (context == null) {
            return null;
        }
        StringBuilder s = new StringBuilder();
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * same to {@link W_ResourceUtil#geFileFromAssets(Context, String)}, but return type is List<String>
     *
     * @param context
     * @param fileName
     * @return
     */
    public static List<String> geFileToListFromAssets(Context context, String fileName) {
        if (context == null || W_StringUtil.isEmpty(fileName)) {
            return null;
        }
        List<String> fileContent = new ArrayList<>();
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                fileContent.add(line);
            }
            br.close();
            return fileContent;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * same to {@link W_ResourceUtil#geFileFromRaw(Context, int)}, but return type is List<String>
     *
     * @param context
     * @param resId
     * @return
     */
    public static List<String> geFileToListFromRaw(Context context, int resId) {
        if (context == null) {
            return null;
        }

        List<String> fileContent = new ArrayList<>();
        BufferedReader reader = null;
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
            reader = new BufferedReader(in);
            String line = null;
            while ((line = reader.readLine()) != null) {
                fileContent.add(line);
            }
            reader.close();
            return fileContent;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 获取工程中资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceId(String parameterName) {
        return getResourceId("id", parameterName);
    }

    /**
     * 获取android资源id
     *
     * @param resFileName   资源文件名
     * @param parameterName
     * @return
     */
    public static int getResourceId(String resFileName, String parameterName) {
        return getResourceId(GEN_PACKAGE_NAME, resFileName, parameterName);
    }

    /**
     * 获取android资源id
     *
     * @param packageName   调用方包的名称
     * @param resFileName   资源文件名
     * @param parameterName
     * @return
     */
    public static int getResourceId(String packageName, String resFileName, String parameterName) {
        if ((packageName != null) && (resFileName != null) && (parameterName != null))
            try {
                Class localClass = Class.forName(packageName + "$"
                    + resFileName);
                Field localField = localClass.getField(parameterName);
                Object localObject = localField.get(localClass.newInstance());
                return Integer.parseInt(localObject.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }
        return -1;
    }

    /**
     * 获取工程中array资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceArrayId(String parameterName) {
        return getResourceId("array", parameterName);
    }

    /**
     * 获取工程中color资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceColorId(String parameterName) {
        return getResourceId("color", parameterName);
    }

    /**
     * 获取工程中drawable资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceDrawableId(String parameterName) {
        return getResourceId("drawable", parameterName);
    }

    /**
     * 获取工程中layout资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceLayoutId(String parameterName) {
        return getResourceId("layout", parameterName);
    }

    /**
     * 获取工程中string资源id
     *
     * @param parameterName
     * @return
     */
    public static int getResourceStringId(String parameterName) {
        return getResourceId("string", parameterName);
    }

}
